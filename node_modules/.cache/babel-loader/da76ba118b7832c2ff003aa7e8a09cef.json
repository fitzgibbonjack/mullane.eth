{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nexport default function useScrollDirection() {\n  _s();\n\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [prevScrollPosition, setPrevScrollPosition] = useState(0);\n\n  const toggleScrollDirection = () => {\n    if (window.scrollY > prevScrollPosition) {\n      setScrollDirection(\"down\");\n    } else {\n      setScrollDirection(\"up\");\n    }\n\n    setPrevScrollPosition(window.scrollY);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", toggleScrollDirection); // cleanup function (when component unmounts)\n\n    return () => {\n      window.removeEventListener(\"scroll\", toggleScrollDirection);\n    };\n  });\n  return scrollDirection;\n}\n\n_s(useScrollDirection, \"ymPgjJZyeIsiS/6f3ICNV3V+cFY=\");","map":{"version":3,"sources":["/Users/jackfitzgibbon/Desktop/portfolio/frontend/app/src/hooks/useScrollDirection.js"],"names":["React","useEffect","useState","useScrollDirection","scrollDirection","setScrollDirection","prevScrollPosition","setPrevScrollPosition","toggleScrollDirection","window","scrollY","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AAC3C,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCH,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,CAAD,CAA5D;;AAEA,QAAMM,qBAAqB,GAAG,MAAM;AAClC,QAAIC,MAAM,CAACC,OAAP,GAAiBJ,kBAArB,EAAyC;AACvCD,MAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACD,KAFD,MAEO;AACLA,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAEDE,IAAAA,qBAAqB,CAACE,MAAM,CAACC,OAAR,CAArB;AACD,GARD;;AAUAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,qBAAlC,EADc,CAEd;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,qBAArC;AACD,KAFD;AAGD,GANQ,CAAT;AAQA,SAAOJ,eAAP;AACD;;GAvBuBD,kB","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport default function useScrollDirection() {\n  const [scrollDirection, setScrollDirection] = useState(null);\n  const [prevScrollPosition, setPrevScrollPosition] = useState(0);\n\n  const toggleScrollDirection = () => {\n    if (window.scrollY > prevScrollPosition) {\n      setScrollDirection(\"down\");\n    } else {\n      setScrollDirection(\"up\");\n    }\n\n    setPrevScrollPosition(window.scrollY);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", toggleScrollDirection);\n    // cleanup function (when component unmounts)\n    return () => {\n      window.removeEventListener(\"scroll\", toggleScrollDirection);\n    };\n  });\n\n  return scrollDirection;\n}\n"]},"metadata":{},"sourceType":"module"}